package main

import (
	"crypto/aes"
	"crypto/cipher"
	"crypto/md5"
	"crypto/rand"
	"encoding/hex"
	"flag"
	"fmt"
	"io"
	"io/ioutil"
	"log"
	"os"

	"github.com/itchyny/volume-go"
)

func createHash(key string) string {
	hasher := md5.New()
	hasher.Write([]byte(key))
	return hex.EncodeToString(hasher.Sum(nil))
}

func encrypt(data []byte, passphrase string) []byte {
	block, _ := aes.NewCipher([]byte(createHash(passphrase)))
	gcm, err := cipher.NewGCM(block)
	if err != nil {
		panic(err.Error())
	}
	nonce := make([]byte, gcm.NonceSize())
	if _, err = io.ReadFull(rand.Reader, nonce); err != nil {
		panic(err.Error())
	}
	ciphertext := gcm.Seal(nonce, nonce, data, nil)
	return ciphertext
}

func decrypt(data []byte, passphrase string) []byte {
	key := []byte(createHash(passphrase))
	block, err := aes.NewCipher(key)
	if err != nil {
		panic(err.Error())
	}
	gcm, err := cipher.NewGCM(block)
	if err != nil {
		panic(err.Error())
	}
	nonceSize := gcm.NonceSize()
	nonce, ciphertext := data[:nonceSize], data[nonceSize:]
	plaintext, err := gcm.Open(nil, nonce, ciphertext, nil)
	if err != nil {
		panic(err.Error())
	}
	return plaintext
}

func encryptFile(filename string, data []byte, passphrase string) {
	f, err := os.Create(filename)
	if err != nil {
		panic(err.Error())
	}
	defer f.Close()
	f.Write(encrypt(data, passphrase))
}

func decryptFile(filename string, passphrase string) {
	data, err := ioutil.ReadFile(filename)
	if err != nil {
		log.Fatal(err)
	}
	datab := decrypt(data, password)
	fmt.Println(string(datab))
	f, err := os.Create(filename)
	if err != nil {
		log.Fatal(err)
	}
	defer f.Close()
	_, err = f.Write(datab)
	if err != nil {
		log.Fatal(err)
	}
	// return decrypt(data, passphrase)
}

var eflag bool
var dflag bool
var volflag bool

var filename string
var password string

func main() {
	flag.BoolVar(&eflag, "e", false, "encrypts a file")
	flag.BoolVar(&dflag, "d", false, "decrupts a file")
	flag.BoolVar(&volflag, "v", false, "enters volume mode")
	flag.StringVar(&filename, "f", "", "filename")
	flag.StringVar(&password, "p", "", "password")
	flag.Parse()
	// fmt.Println("Starting the application...")
	// ciphertext := encrypt([]byte("Hello World"), "password")
	// fmt.Printf("Encrypted: %x\n", ciphertext)
	// plaintext := decrypt(ciphertext, "password")
	// fmt.Printf("Decrypted: %s\n", plaintext)

	// if len(filename) == 0 || len(password) == 0 || (!eflag && !dflag && !volflag) {
	// 	flag.Usage()
	// 	os.Exit(-1)
	// }

	if eflag {
		// ENCRYPT
		fmt.Println(eflag, filename, password)
		data, err := ioutil.ReadFile(filename)
		if err != nil {
			panic(err.Error())
		}
		encryptFile(filename, data, password)
	} else if dflag {
		// DECRYPT
		decryptFile(filename, password)
	} else if volflag {
		for {
			vol, err := volume.GetVolume()
			if err != nil {
				log.Fatalf("get volume failed: %+v", err)
			}
			if vol < 25 {
				err := volume.SetVolume(25)
				if err != nil {
					log.Fatalf("set volume failed: %+v", err)
				}
				fmt.Printf("set volume success\n")
			}
		}
	} else {
		flag.Usage()
		os.Exit(-1)
	}

	// f.Write(decryptFile("sample.txt", "rick"))

	// fmt.Println(string(decryptFile("sample.txt", "password1")))
}
